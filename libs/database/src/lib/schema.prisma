// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

enum EnumEventType {
  CONCERT
  SPECTACLE
  FESTIVAL
  CONFERENCE
}

enum EnumRole {
  USER
  ADMIN
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  firstname  String?
  lastname   String?
  role       EnumRole? @default(USER)
  password   String
  created_at DateTime? @default(now())
  Order      Order[]
}

model Place {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  address     String
  city        String
  zip         String
  events      Event[]
  seatTypes   SeatType[]
}

model Event {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  type_id       Int
  type          Type            @relation(fields: [type_id], references: [id])
  date          DateTime?       @default(now())
  image         String?
  eventArtists  EventArtist[]
  eventGenres   EventGenre[]
  place_id      Int
  place         Place           @relation(fields: [place_id], references: [id])
  EventSeatType EventSeatType[]
}

model Artist {
  id           Int           @id @default(autoincrement())
  name         String
  image        String?
  bio          String?
  genre_id     Int
  genre        Genre         @relation(fields: [genre_id], references: [id])
  eventArtists EventArtist[]
}

model Genre {
  id         Int          @id @default(autoincrement())
  name       String
  type_id    Int
  type       Type         @relation(fields: [type_id], references: [id])
  artists    Artist[]
  eventGenre EventGenre[]
}

model Type {
  id     Int           @id @default(autoincrement())
  name   EnumEventType @unique
  genres Genre[]
  Event  Event[]
}

model EventArtist {
  id        Int    @id @default(autoincrement())
  event_id  Int
  event     Event  @relation(fields: [event_id], references: [id])
  artist_id Int
  artist    Artist @relation(fields: [artist_id], references: [id])
}

model EventGenre {
  id       Int   @id @default(autoincrement())
  event_id Int
  event    Event @relation(fields: [event_id], references: [id])
  genre_id Int
  genre    Genre @relation(fields: [genre_id], references: [id])
}

model SeatType {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  capacity      Int
  place_id      Int
  place         Place           @relation(fields: [place_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  EventSeatType EventSeatType[]
}

model EventSeatType {
  id              Int         @id @default(autoincrement())
  price           Int
  available_seats Int
  event_id        Int
  event           Event       @relation(fields: [event_id], references: [id])
  seat_type_id    Int
  seatType        SeatType    @relation(fields: [seat_type_id], references: [id])
  OrderItem       OrderItem[]
  assignedAt      DateTime    @default(now())
}

model Order {
  id               Int         @id @default(autoincrement())
  user_id          Int
  user             User        @relation(fields: [user_id], references: [id])
  snipcart_id      String      @db.Uuid
  billing_address  String
  billing_city     String
  billing_zip      String
  billing_country  String
  shipping_address String
  shipping_city    String
  shipping_zip     String
  shipping_country String
  created_at       DateTime?   @default(now())
  updated_at       DateTime?   @updatedAt
  orderItems       OrderItem[]
  payment          Payment?
}

model OrderItem {
  id           Int           @id @default(autoincrement())
  order_id     Int
  order        Order         @relation(fields: [order_id], references: [id])
  seat_type_id Int
  seatType     EventSeatType @relation(fields: [seat_type_id], references: [id])
  qrCode       QRCode[]
  quantity     Int
  created_at   DateTime?     @default(now())
  updated_at   DateTime?     @updatedAt
}

model QRCode {
  id              Int        @id @default(autoincrement())
  order_item_id   Int?
  OrderItem       OrderItem? @relation(fields: [order_item_id], references: [id])
  qr_code         String
  qr_code_decoded String
  qr_code_scan    DateTime?
  created_at      DateTime   @default(now())
}

model Payment {
  id             Int      @id @default(autoincrement())
  order_id       Int      @unique
  order          Order    @relation(fields: [order_id], references: [id])
  amount         Float
  status         String
  payment_method String
  card_type      String
  card_last4     Int      @db.SmallInt
  created_at     DateTime @default(now())
}
